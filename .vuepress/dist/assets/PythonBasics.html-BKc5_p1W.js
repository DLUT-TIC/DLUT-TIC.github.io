import{_ as l,r as i,o,c,d as n,e as a,a as p,b as t}from"./app-COWjHGTC.js";const r={},u={href:"https://docs.python.org/3/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://peps.python.org/pep-0020/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://docs.python.org/zh-cn/3/tutorial/index.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://cs61a.org/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://docs.jupyter.org/en/latest/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.dataquest.io/blog/jupyter-notebook-tutorial/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://medium.com/ai-for-k12/jupyter-notebook-%E5%AE%8C%E6%95%B4%E4%BB%8B%E7%B4%B9-%E5%AE%89%E8%A3%9D%E5%8F%8A%E4%BD%BF%E7%94%A8%E8%AA%AA%E6%98%8E-846b5432f044",target:"_blank",rel:"noopener noreferrer"},g={href:"https://blog.csdn.net/qq_27825451/article/details/84427269",target:"_blank",rel:"noopener noreferrer"},y={href:"https://discuss.python.org/t/what-is-the-purpose-of-lambda-expressions/12415/2",target:"_blank",rel:"noopener noreferrer"};function f(x,s){const e=i("ExternalLinkIcon");return o(),c("div",null,[s[13]||(s[13]=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference"},[n("span",null,"Reference")])],-1)),n("ul",null,[n("li",null,[n("a",u,[s[0]||(s[0]=a("python官方文档")),p(e)])]),n("li",null,[n("a",d,[s[1]||(s[1]=a("Zen of python")),p(e)])]),n("li",null,[n("a",m,[s[2]||(s[2]=a("Python 教程 — Python 3.13.0 文档")),p(e)])]),n("li",null,[n("a",k,[s[3]||(s[3]=a("CS 61A Fall 2024")),p(e)]),s[4]||(s[4]=a(" 👈 ")),s[5]||(s[5]=n("strong",null,"强烈推荐",-1))])]),s[14]||(s[14]=t(`<h2 id="the-zen-of-python" tabindex="-1"><a class="header-anchor" href="#the-zen-of-python"><span>The Zen of Python</span></a></h2><p>Python之禅</p><blockquote><p><em>Beautiful is better than ugly</em><br><em>Simple is better than complex</em> ......</p></blockquote><p>Python是一门优雅简洁的语言<br> 至少设计的时候是这么想的</p><h2 id="基本介绍" tabindex="-1"><a class="header-anchor" href="#基本介绍"><span>基本介绍</span></a></h2><h3 id="在哪里写python" tabindex="-1"><a class="header-anchor" href="#在哪里写python"><span>在哪里写python</span></a></h3><ul><li>vscode YES!</li><li>python</li><li>ipython</li><li>jupyter notebook</li><li>jupyter lab</li></ul><h4 id="python-解释器" tabindex="-1"><a class="header-anchor" href="#python-解释器"><span>Python 解释器</span></a></h4><p>就是python自带的解释器</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">python</span>
<span class="line"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> 像这样就已经唤出python</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/Emisaber/pic_obsidian/main/Pasted image 20241017162142.png" alt="Pasted image 20241017162142"></p><blockquote><p>此时会唤醒当前环境下的 python.exe<br> 观察python的信息可以看出一些端倪</p></blockquote><p>可以看到是在当前的虚拟环境下的python<br><img src="https://raw.githubusercontent.com/Emisaber/pic_obsidian/main/Pasted image 20241017162749.png" alt="Pasted image 20241017162749"></p><h4 id="ipython" tabindex="-1"><a class="header-anchor" href="#ipython"><span>IPython</span></a></h4><p>更加强大的解释器</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">ipython</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/Emisaber/pic_obsidian/main/Pasted image 20241017163111.png" alt="Pasted image 20241017163111"></p><p>展示一下python</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">from</span> sympy <span class="token keyword">import</span> <span class="token operator">*</span></span>
<span class="line">inti_printting<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">x <span class="token operator">=</span> var<span class="token punctuation">(</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">y <span class="token operator">=</span> asin<span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line">diff<span class="token punctuation">(</span>y<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">integrate<span class="token punctuation">(</span>y<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="jupyter" tabindex="-1"><a class="header-anchor" href="#jupyter"><span>Jupyter</span></a></h4><p>一个很热门的数据科学工具</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">jupyter notebook</span>
<span class="line">jupyter lab</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>新建环境加入jupyter 的命令(上一次有讲过)</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">conda <span class="token function">install</span> ipykernel</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="jupyter-notebook" tabindex="-1"><a class="header-anchor" href="#jupyter-notebook"><span>jupyter notebook</span></a></h5><p><img src="https://raw.githubusercontent.com/Emisaber/pic_obsidian/main/Pasted image 20241017223534.png" alt="Pasted image 20241017223534"></p><p>右上角新建一个笔记本<br><img src="https://raw.githubusercontent.com/Emisaber/pic_obsidian/main/Pasted image 20241017223747.png" alt="Pasted image 20241017223747"></p><p>选择一个环境(创建环境后安装了ipykernel正常能够看到)<br><img src="https://raw.githubusercontent.com/Emisaber/pic_obsidian/main/Pasted image 20241017223819.png" alt="Pasted image 20241017223819"></p><p>与vscode中运行一致<br> 支持markdown cell(单元) 和 code cell(单元)<br> shift+回车 运行<br><img src="https://raw.githubusercontent.com/Emisaber/pic_obsidian/main/Pasted image 20241017223952.png" alt="Pasted image 20241017223952"></p><h5 id="jupyter-lab" tabindex="-1"><a class="header-anchor" href="#jupyter-lab"><span>jupyter lab</span></a></h5><p>更加友好的jupyter notebook</p><p><img src="https://raw.githubusercontent.com/Emisaber/pic_obsidian/main/Pasted image 20241017223659.png" alt="Pasted image 20241017223659"></p><p>更多可以自行搜索，或者</p>`,33)),n("ul",null,[n("li",null,[n("a",h,[s[6]||(s[6]=a("Project Jupyter Documentation — Jupyter Documentation 4.1.1 alpha documentation")),p(e)])]),n("li",null,[n("a",b,[s[7]||(s[7]=a("How to Use Jupyter Notebook in 2024: A Beginner’s Tutorial")),p(e)])]),n("li",null,[n("a",v,[s[8]||(s[8]=a("Jupyter Notebook 完整介紹、安裝及使用說明. Python 開發環境介紹 - Jupyter Notebook 快速入門指南… | by Coding Lab | AI for K-12 | Medium")),p(e)])]),n("li",null,[n("a",g,[s[9]||(s[9]=a("史上最详细、最完全的jupyter notebook使用教程，Python使用者必备！——ipython系列之三-CSDN博客")),p(e)])])]),s[15]||(s[15]=t(`<h3 id="python是什么" tabindex="-1"><a class="header-anchor" href="#python是什么"><span>Python是什么</span></a></h3><p>几个观点</p><ul><li>python是胶水语言</li><li>python是解释型语言</li><li>python是动态语言</li><li>python是脚本语言</li></ul><h4 id="胶水语言" tabindex="-1"><a class="header-anchor" href="#胶水语言"><span>胶水语言</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd</span>
<span class="line">DF <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Numpy 怎么写的<br><img src="https://raw.githubusercontent.com/Emisaber/pic_obsidian/main/Pasted image 20241018144950.png" alt="Pasted image 20241018144950"></p><p>DataFrame是怎么来的<br><img src="https://raw.githubusercontent.com/Emisaber/pic_obsidian/main/Pasted image 20241018150305.png" alt="Pasted image 20241018150305"></p><p>python涉及的领域</p><ul><li>前端 <code>django</code></li><li>后端 <code>flask</code></li><li>游戏 <code>PyGame</code></li><li>数据科学 <code>numpy pandas ...</code></li><li>机器学习 <code>Keras</code></li><li>深度学习 <code>tensorflow torch</code></li></ul><h4 id="解释型语言" tabindex="-1"><a class="header-anchor" href="#解释型语言"><span>解释型语言</span></a></h4><p>不需要进行编译，通过解释器逐行读取执行的语言<br> 解释器不像编译器一样直接生成机器指令，指令会通过另外的程序执行<br> 传统的python程序会将程序编译(狭义的编译)成字节码，由python虚拟机执行<br><img src="https://raw.githubusercontent.com/Emisaber/pic_obsidian/main/Pasted image 20241018153415.png" alt="Pasted image 20241018153415"></p><p>解释型语言通常</p><ul><li>与底层交互的功能受限</li><li>语言会有比较多的限制</li><li>速度比较慢</li><li>简单</li><li>容易调试</li></ul><h4 id="动态语言" tabindex="-1"><a class="header-anchor" href="#动态语言"><span>动态语言</span></a></h4><p>python 的允许在运行时(at run time)决定变量类型<br> 具有如下特性</p><ul><li>不需要显式的声明</li><li>根据赋值的值(value)推断类型</li><li>可以在运行过程更改变量的类型</li><li>隐式的类型转换</li></ul><p><img src="https://raw.githubusercontent.com/Emisaber/pic_obsidian/main/Pasted image 20241018225141.png" alt="Pasted image 20241018225141"></p><p>C语言是怎样的<br><img src="https://raw.githubusercontent.com/Emisaber/pic_obsidian/main/Pasted image 20241018225315.png" alt="Pasted image 20241018225315"></p><h4 id="脚本语言" tabindex="-1"><a class="header-anchor" href="#脚本语言"><span>脚本语言</span></a></h4><p>起初脚本仅限于自动化shell，现在含义拓宽，很多高级语言也称为脚本语言<br> 一般有以下特点</p><ul><li>简单</li><li>自动化</li><li>解释型</li><li>从代码的头部开始(不需要main函数)</li></ul><h4 id="一切皆对象" tabindex="-1"><a class="header-anchor" href="#一切皆对象"><span>一切皆对象</span></a></h4><p>python 中一切都是对象，每个变量相当于一个容器，或者说一个名字(label)，存放赋予的值(value)，当下一次赋值时，只是另一个value赋给了这个名字</p><p><img src="https://raw.githubusercontent.com/Emisaber/pic_obsidian/main/Pasted image 20241018154231.png" alt="Pasted image 20241018154231"></p><blockquote><p><code>id</code>返回一个对象的唯一标识，代表内存中的地址，真正是对象的不是变量名而是 value</p></blockquote><p><img src="https://raw.githubusercontent.com/Emisaber/pic_obsidian/main/Pasted image 20241018154515.png" alt="Pasted image 20241018154515"><br><img src="https://raw.githubusercontent.com/Emisaber/pic_obsidian/main/Pasted image 20241018154735.png" alt="Pasted image 20241018154735"></p><h3 id="python怎么写" tabindex="-1"><a class="header-anchor" href="#python怎么写"><span>Python怎么写</span></a></h3><h4 id="基本的" tabindex="-1"><a class="header-anchor" href="#基本的"><span>基本的</span></a></h4><h5 id="赋值" tabindex="-1"><a class="header-anchor" href="#赋值"><span>赋值</span></a></h5><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">a <span class="token operator">=</span> <span class="token number">123</span></span>
<span class="line">a <span class="token operator">=</span> <span class="token string">&quot;Hello TIC&quot;</span>  </span>
<span class="line">a <span class="token operator">=</span> <span class="token number">1.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/Emisaber/pic_obsidian/main/Pasted image 20241018232519.png" alt="Pasted image 20241018232519|443"></p><p>还可以</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="值得一提的运算" tabindex="-1"><a class="header-anchor" href="#值得一提的运算"><span>值得一提的运算</span></a></h5><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># 除法</span></span>
<span class="line"><span class="token number">4</span><span class="token operator">/</span><span class="token number">3</span></span>
<span class="line"><span class="token comment"># 指数运算</span></span>
<span class="line"><span class="token number">2</span><span class="token operator">**</span><span class="token number">2</span></span>
<span class="line"><span class="token comment"># 取商</span></span>
<span class="line"><span class="token number">4</span><span class="token operator">//</span><span class="token number">3</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 字符串</span></span>
<span class="line"><span class="token string">&quot;Hello&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;TIC&quot;</span></span>
<span class="line"><span class="token string">&quot;-&quot;</span><span class="token operator">*</span><span class="token number">30</span></span>
<span class="line"><span class="token string">&quot;&quot;</span> <span class="token string">&#39;&#39;</span> <span class="token comment">#是相同的</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 没有 ++</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="标准输入输出" tabindex="-1"><a class="header-anchor" href="#标准输入输出"><span>标准输入输出</span></a></h5><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># 输入</span></span>
<span class="line">a <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;say something, please &quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 输出</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># 结尾会自动加上换行</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="条件" tabindex="-1"><a class="header-anchor" href="#条件"><span>条件</span></a></h5><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">a <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token comment"># correct one</span></span>
<span class="line"><span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span></span>
<span class="line">	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello TIC&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">elif</span> a <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span></span>
<span class="line">	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;⛔⛔⛔&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">elif</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span></span>
<span class="line">	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;⛔⛔⛔&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="循环" tabindex="-1"><a class="header-anchor" href="#循环"><span>循环</span></a></h5><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># while 循环</span></span>
<span class="line">a <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">while</span> a <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span></span>
<span class="line">	<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></span>
<span class="line">	a <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># for 循环</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">	<span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># for 多重循环</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">	<span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">		<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello TIC&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># range(start, end, step) 可以认为是得到 从start到end-1，步数为step的一串数 </span></span>
<span class="line"><span class="token comment"># 没有 do while 循环</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h4><p>编程的函数与数学上的函数十分相似</p>`,43)),s[16]||(s[16]=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mi",null,"y"),n("mo",null,"="),n("mi",null,"f"),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",{separator:"true"},","),n("mi",null,"y"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"}," y = f(x,y) ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),n("span",{class:"mclose"},")")])])])])],-1)),s[17]||(s[17]=t(`<p><strong>给定输入，得到输出</strong></p><h5 id="基本形式" tabindex="-1"><a class="header-anchor" href="#基本形式"><span>基本形式</span></a></h5><p>赋值是一种抽象，将具体的数值与一个名字(label/name)绑定起来<br> 函数也是一种抽象思想，将语句(statement)与名字绑定起来</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>formal parameters<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">&lt;</span><span class="token keyword">return</span> expression<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),s[18]||(s[18]=n("ul",null,[n("li",null,[a("关键字："),n("code",null,"def")]),n("li",null,[n("code",null,"<name>"),a(" 函数名字")]),n("li",null,[n("code",null,"()"),a(" 括号内是函数的参数")]),n("li",null,[n("code",null,"return"),a(" 函数的返回值，即"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"f"),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mtext",null,"，"),n("mi",null,"y"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"f(x，y)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mord cjk_fallback"},"，"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),n("span",{class:"mclose"},")")])])]),a("得到的值")])],-1)),s[19]||(s[19]=t(`<h5 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h5><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> <span class="token function">summation</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">	total <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">	<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">		total <span class="token operator">+=</span> i</span>
<span class="line"></span>
<span class="line">	<span class="token keyword">return</span> total</span>
<span class="line"></span>
<span class="line">summation<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数封装了一段代码，对外提供一个接口，即函数调用</p><ul><li>封装是一个重要概念，<strong>代码变得优雅</strong></li><li>增强了复用性</li></ul><p>python允许使用函数作为参数</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> <span class="token function">summation</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> term<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">	total<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span></span>
<span class="line">	<span class="token keyword">while</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">:</span></span>
<span class="line">		total<span class="token punctuation">,</span> k <span class="token operator">=</span> total <span class="token operator">+</span> term<span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> k<span class="token operator">+</span><span class="token number">1</span></span>
<span class="line">	<span class="token keyword">return</span> total</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">from</span> math <span class="token keyword">import</span> add</span>
<span class="line">summation<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> add<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>两个代码是等价的<br> 但是实际上存在一些问题<br> 以函数为参数的<code>summation</code>很明显知道传入的函数需要两个参数，一个是<code>k</code>，另一个是<code>1</code>，并不合理，有点像是面向答案编程</p><p>函数定义了传入的参数应该是什么样的<br> 但最好提供比较宽泛的定义</p><p>如果函数定义<code>term</code>这个函数只能传入k进行计算，要求传入<code>term</code>的时候，由程序员考虑如何得到想要的累加和，会比较好，更具有一般性</p><p>但是<code>add</code>有两个参数<br> 如何解决这个问题？</p><h5 id="function-as-return-value" tabindex="-1"><a class="header-anchor" href="#function-as-return-value"><span>Function as return value</span></a></h5><p>python允许在函数内定义函数，将函数作为返回值</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">	<span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">		<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">return</span> f2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">f2 <span class="token operator">=</span> f1<span class="token punctuation">(</span><span class="token string">&quot;Hello TIC&quot;</span><span class="token punctuation">)</span></span>
<span class="line">f2</span>
<span class="line">f2<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="柯里化" tabindex="-1"><a class="header-anchor" href="#柯里化"><span>柯里化</span></a></h5><p>transform a multi argument function into a single argument function that takes the rest of the arguments.<br> 将多元函数转变为接受单参数的函数，让这个函数接受其余的参数</p><p>只要返回一个已经传了一个参数的函数，就可以使add参数变成一个</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">from</span> operator <span class="token keyword">import</span> add</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> <span class="token function">GetNewAdd</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">	<span class="token keyword">def</span> <span class="token function">NewAdd</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">		<span class="token keyword">return</span> add<span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">return</span> NewAdd</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">NewAdd <span class="token operator">=</span> GetNewAdd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">NewAdd<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> <span class="token function">summation</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> term<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    total<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span></span>
<span class="line">    <span class="token keyword">while</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">:</span></span>
<span class="line">        total<span class="token punctuation">,</span> k <span class="token operator">=</span> total <span class="token operator">+</span> term<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">return</span> total</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">summation<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> NewAdd<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="lambda-expression" tabindex="-1"><a class="header-anchor" href="#lambda-expression"><span>Lambda expression</span></a></h5><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">lambda</span> x <span class="token punctuation">:</span> x<span class="token operator">+</span><span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,25)),n("p",null,[s[11]||(s[11]=a("为什么使用lambda")),s[12]||(s[12]=n("br",null,null,-1)),n("a",y,[s[10]||(s[10]=a("What is the purpose of Lambda expressions? - Python Help - Discussions on Python.org")),p(e)])]),s[20]||(s[20]=t(`<p>lambda表达式又称匿名函数，定义lambda的时候不需要给这个函数命名(相比于<code>def</code>)<br> lambda设计的目的是用于一次性的函数，以至于不需要给它名字 👈 作为参数使用</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">summation<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>lambda 同样可以以函数为参数，返回函数</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">lambda</span> f<span class="token punctuation">,</span> x<span class="token punctuation">:</span> f<span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">lambda</span> <span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">+</span><span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">a <span class="token operator">=</span> <span class="token keyword">lambda</span> f<span class="token punctuation">,</span> x<span class="token punctuation">:</span> f<span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line">GetNewAdd <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token keyword">lambda</span> y<span class="token punctuation">:</span> x<span class="token operator">+</span>y</span>
<span class="line">NewAdd <span class="token operator">=</span> GetNewAdd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">summation<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> NewAdd<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="递归" tabindex="-1"><a class="header-anchor" href="#递归"><span>递归</span></a></h4><p>什么是递归<br> 自己直接或间接地调用自己称为递归<br> 函数的递归利用了函数抽象的特性，将问题拆分为更小的子问题，隐去了问题的复杂性</p><p>递归函数通常分为两个部分，一个是跳出递归的base case，一个是进行递归的function call</p><h5 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1"><span>Example</span></a></h5><p>直接递归</p><p>计算前n个自然数的和</p>`,11)),s[21]||(s[21]=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mi",null,"S"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",{stretchy:"false"},")"),n("mo",null,"="),n("mi",null,"S"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",null,"−"),n("mn",null,"1"),n("mo",{stretchy:"false"},")"),n("mo",null,"+"),n("mi",null,"n")]),n("annotation",{encoding:"application/x-tex"}," S(n) = S(n-1) + n ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"n")])])])])],-1)),s[22]||(s[22]=t(`<div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> <span class="token function">RecursiveSum</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">	<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token number">0</span></span>
<span class="line">	<span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">		<span class="token keyword">return</span> n <span class="token operator">+</span> RecursiveSum<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">RecursiveSum<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>斐波那契数组</p><table><thead><tr><th>index</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>-</th></tr></thead><tbody><tr><td>number</td><td>1</td><td>1</td><td>2</td><td>3</td><td>5</td><td>8</td><td>13</td><td>-</td></tr></tbody></table><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">or</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">else</span><span class="token punctuation">:</span> </span>
<span class="line">        <span class="token keyword">return</span> fibonacci<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> fibonacci<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">	<span class="token keyword">print</span><span class="token punctuation">(</span>fibonacci<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">fibonacci<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>间接递归<br> 判断奇偶数</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> <span class="token function">IsEven</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">	<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">    	<span class="token keyword">return</span> <span class="token boolean">True</span></span>
<span class="line">    <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">    	<span class="token keyword">return</span> IsOdd<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">IsOdd</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">	<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">    	<span class="token keyword">return</span> <span class="token boolean">False</span></span>
<span class="line">    <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">    	<span class="token keyword">return</span> IsEven<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">IsOdd<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span></span>
<span class="line">IsEven<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>不要思考内部细节！<br> 但是你想知道的话</p><ul><li>无论调用哪个函数，到达 IsEven中的0判断一定经过偶数次<code>-1</code></li><li>无论调用哪个函数，到达 IsOdd中的0判断一定经过奇数次<code>-1</code></li></ul></blockquote><p>更多参见练习题</p><h4 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构"><span>数据结构</span></a></h4><h5 id="简单介绍一下" tabindex="-1"><a class="header-anchor" href="#简单介绍一下"><span>简单介绍一下</span></a></h5><p>python 比较常用的数据结构 <code>list, tuple, dict, set</code></p><p>列表<br> 列表的元素可以是不同类型的</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;我&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;是&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;列表&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token builtin">type</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>元组</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;我&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;是&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;元组&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token builtin">type</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>字典</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;我&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;字典&quot;</span><span class="token punctuation">}</span>  <span class="token comment"># key : value</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>列表的元素是可变(mutable)的</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;你&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>元组是不可变的</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;试一下&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>字典的值(value)是可变的</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">d<span class="token punctuation">[</span><span class="token string">&quot;我&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;字典吗&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="索引与切片-index-and-slides" tabindex="-1"><a class="header-anchor" href="#索引与切片-index-and-slides"><span>索引与切片 index and slides</span></a></h5><p>索引，可以和C索引是一致的</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span></span>
<span class="line">t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span></span>
<span class="line">t<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment">#越界</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">l<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">l<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span></span>
<span class="line">l<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>切片，范围性的索引<br><code>slide[start:end+1:step]</code><br> 返回原来的数据类型<br> 更复杂的切片参考 <code>numpy</code> <code>pandas</code> 的使用</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span></span>
<span class="line">t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">]</span></span>
<span class="line">t<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span></span>
<span class="line">t<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="一个比较常用的技巧-list-comprehension" tabindex="-1"><a class="header-anchor" href="#一个比较常用的技巧-list-comprehension"><span>一个比较常用的技巧 list comprehension</span></a></h5><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">l1 <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line">l2 <span class="token operator">=</span> <span class="token punctuation">[</span>j <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line">l2 <span class="token operator">=</span> <span class="token punctuation">[</span>j <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">if</span> j <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多的用法请自行搜索<br> 或者需要时再学习</p>`,37))])}const j=l(r,[["render",f],["__file","PythonBasics.html.vue"]]),q=JSON.parse('{"path":"/blogs/tongshike/PythonBasics.html","title":"Basic of Python","lang":"zh-CN","frontmatter":{"title":"Basic of Python","date":"2024/10/19","author":"saber","categories":["通识课"],"tags":["python"]},"headers":[{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]},{"level":2,"title":"The Zen of Python","slug":"the-zen-of-python","link":"#the-zen-of-python","children":[]},{"level":2,"title":"基本介绍","slug":"基本介绍","link":"#基本介绍","children":[{"level":3,"title":"在哪里写python","slug":"在哪里写python","link":"#在哪里写python","children":[]},{"level":3,"title":"Python是什么","slug":"python是什么","link":"#python是什么","children":[]},{"level":3,"title":"Python怎么写","slug":"python怎么写","link":"#python怎么写","children":[]}]}],"git":{"createdTime":1729307584000,"updatedTime":1729308360000,"contributors":[{"name":"saber","email":"wuyacwc@gmail.com","commits":1}]},"filePathRelative":"blogs/通识课/PythonBasics.md"}');export{j as comp,q as data};
