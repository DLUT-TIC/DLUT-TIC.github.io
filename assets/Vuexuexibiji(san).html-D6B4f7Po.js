import{_ as t,o as e,c as l,b as n,d as s,t as p,e as a}from"./app-Dzz5E2t4.js";const c={},o=a(`<h2 id="vue学习笔记-三-计算属性、类与样式绑定、表单输入绑定、侦听器、模版引用" tabindex="-1"><a class="header-anchor" href="#vue学习笔记-三-计算属性、类与样式绑定、表单输入绑定、侦听器、模版引用"><span>Vue学习笔记（三）：计算属性、类与样式绑定、表单输入绑定、侦听器、模版引用</span></a></h2><h3 id="一、计算属性" tabindex="-1"><a class="header-anchor" href="#一、计算属性"><span>一、计算属性</span></a></h3><h4 id="_1-使用方式" tabindex="-1"><a class="header-anchor" href="#_1-使用方式"><span>1.使用方式</span></a></h4><p>在前面模版语法的学习中我们了解到，Vue 在所有的数据绑定中都支持使用完整地 JavaScript 表达式。但当模版中的表达式较为复杂时，可能会显得十分臃肿，难以维护。这时就要用到我们的计算属性了。下面以一个简单的代码为例，用来检查<code>names</code>数组中是否有元素：</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ isNames }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">names</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;小火龙&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;妙蛙种子&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;杰尼龟&quot;</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">isNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>names<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">&quot;Yes&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;No&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们通常将计算属性放在与<code>data</code>同级的<code>computed</code>中，与方法不同的是，我们在调用计算属性时不需要加括号，而是直接写函数名，使用方式与一般的属性相同。</p><p>既然提到方法，我们不免疑惑，我们使用方法似乎也能实现相同的功能，为什么又要引入所谓的计算属性呢？计算属性和传统的方法相比有什么优势？</p><h4 id="_2-计算属性与方法的区别" tabindex="-1"><a class="header-anchor" href="#_2-计算属性与方法的区别"><span>2.计算属性与方法的区别</span></a></h4><p>计算属性与方法的不同之处在于计算属性值会基于其响应式依赖而被缓存。一个计算属性只会在其响应式依赖更新时才会重新计算，否则无论被访问多少次都会直接返回先前的计算结果，而不用重复执行函数。以上面的代码为例，如果我们额外添加一行 <code>&lt;p&gt;{{ isNames }}&lt;/p&gt;</code>，<code>isNames</code>函数也只会被执行一次，只有当其所依赖的<code>names</code>更新时，其才会被重新执行。</p><p>与此相对的，方法调用总是会在重渲染发生时再次执行函数。</p><h3 id="二、类与样式绑定" tabindex="-1"><a class="header-anchor" href="#二、类与样式绑定"><span>二、类与样式绑定</span></a></h3><p>为了方便使用，Vue 为<code>class</code>和<code>style</code>属性的<code>v-bind</code>用法提供了功能增强，使其除了能和一般的属性一样绑定字符串外，还能够进行对象或者数组的绑定。</p><h4 id="_1-class-的绑定" tabindex="-1"><a class="header-anchor" href="#_1-class-的绑定"><span>1.Class 的绑定</span></a></h4><p><strong>绑定对象：</strong> 我们可以通过给<code>v-bind: class</code>传递一个对象的方式来切换<code>class</code>：</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">:class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> pokStyle</span><span class="token punctuation">&gt;</span></span>{{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;宝可梦&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">pokStyle</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">Size</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">Color</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"></span>
<span class="line">  <span class="token selector">.Size</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">font-size</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token selector">.Color</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>绑定数组：</strong> 也可以将其修改为数组的形式：</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">:class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> Class</span><span class="token punctuation">&gt;</span></span>{{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;宝可梦&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">Class</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Size&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Color&quot;</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>：class</code>指令可以也和一般的<code>class</code>属性共存：</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">&quot;</span>active<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> Class</span><span class="token punctuation">&gt;</span></span>{{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-style-绑定" tabindex="-1"><a class="header-anchor" href="#_2-style-绑定"><span>2.Style 绑定</span></a></h4><p><code>style</code>与对象绑定的使用方法与<code>class</code>相同：</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">:style</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">&quot;</span>{color: Color, fontSize: fontSize + &#39;px&#39;}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;宝可梦&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">Color</span><span class="token operator">:</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">fontSize</span> <span class="token operator">:</span><span class="token number">30</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>style</code>同样也可以与数组绑定，但其用处与对象绑定重合度较高且意义不大，这里就不在进行赘述。</p><h3 id="三、表单输入绑定" tabindex="-1"><a class="header-anchor" href="#三、表单输入绑定"><span>三、表单输入绑定</span></a></h3><h4 id="_1-v-model-指令" tabindex="-1"><a class="header-anchor" href="#_1-v-model-指令"><span>1.v-model 指令</span></a></h4><p>在前端处理表单数据时，我们往往需要将用户在表单框中输入的内容同步给 JavaScript 中相应的变量。手动连接值绑定和更改事件监听器是一件很麻烦的事情，而 Vue 为我们提供的<code>v-model</code>指令可以帮助我们优雅地解决这个问题。</p><p>下面我们依旧以一段简单的代码为例进行讲解：</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们使用<code>v-model</code>指令把表单与<code>name</code>进行绑定，当我们在表单中输入内容时，下方的<code>name</code>也会实时更新，与我们所输入的内容保持一致。</p><p>简单点的理解就是<code>v-bind</code>绑定属性，属于单向绑定，而<code>v-model</code>则属于双向绑定，修改任何一边都会同步到另外一边。</p><h4 id="_2-v-model-修饰符" tabindex="-1"><a class="header-anchor" href="#_2-v-model-修饰符"><span>2.v-model 修饰符</span></a></h4><p><code>v-model</code>指令为我们提供了以下几种修饰符：</p><p><code>.laze</code></p><p>默认情况下，<code>v-model</code>会在每次<code>input</code>事件后更新数据，我们可以添加<code>.lazy</code>修饰符来改为在每次<code>change</code>事件后更新数据。这里的<code>change</code>事件我们可以简单理解为其失去焦点或者我们按下 Enter 键。</p><p><code>.number</code></p><p>强制将用户输入的内容转换为数字类型，这样我们的属性值就会始终是一个数字。但要注意的是该修饰符只会尝试将用户输入的值转换为数字类型。如果用户输入的值无法转换为有效的数字，那么属性的值将保持为 NaN（非数字）。</p><p><code>.trim</code></p><p>自动去除用户输入值的首尾空格。</p><h3 id="四、侦听器" tabindex="-1"><a class="header-anchor" href="#四、侦听器"><span>四、侦听器</span></a></h3>`,39),i=n("code",null,"data",-1),u=a(`<p>让我们以下面的代码为例详细讲解：</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">&quot;</span>Update<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>mega进化!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;喷火龙&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;mega喷火龙X&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们一般把侦听函数放在与<code>data</code>同级的<code>watch</code>中，且侦听函数的函数名必须要与其侦听的数据名相同，例如我们这里的<code>name()</code>函数的作用就是侦听<code>name</code>的变化。同时侦听函数可以使用两个参数分别表示数据变化后的新值和变化前的旧值。</p><p>当我们点击按钮后，“喷火龙”mega进化为“mega喷火龙X”，<code>name()</code>函数侦听到这一变化，开始执行，将<code>name</code>的新值和旧值分别打印出来。</p><h3 id="五、模版引用" tabindex="-1"><a class="header-anchor" href="#五、模版引用"><span>五、模版引用</span></a></h3><h4 id="_1-引子" tabindex="-1"><a class="header-anchor" href="#_1-引子"><span>1.引子</span></a></h4><p>在讲模版引用之前，我们先回顾一下目前已经掌握的对 DOM 的几种操作：</p>`,7),d=n("li",null,[s("改变属性：使用"),n("code",null,"v-bind"),s("指令；")],-1),r=n("li",null,[s("绑定事件：使用"),n("code",null,"v-on"),s("指令；")],-1),k=a(`<p>可以看到，目前为止，我们对于 DOM 的操作，都是通过 Vue 为我们提供的方案来实现的。虽然这几种方法已经基本满足了我们对于 DOM 操作的需求，但如果在某些特殊的情况下我们依旧想要直接地去操作 DOM，我们可以通过模版引用的方式。</p><h4 id="_2-模版引用获取-dom-操作" tabindex="-1"><a class="header-anchor" href="#_2-模版引用获取-dom-操作"><span>2.模版引用获取 DOM 操作</span></a></h4><p>想要实现直接访问底层 DOM 元素，我们可以使用特殊的<code>ref</code>属性。<code>ref</code>属性允许我们在一个特定的 DOM 元素或子组件实例被挂载后，获得对它的直接引用。在挂载结束后，引用都会被暴露在<code>this.$refs</code>之上，下面给出代码示例：</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">&quot;</span>getElementHandle<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>超极巨化<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;皮卡丘&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">getElementHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>container<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&quot;超极巨皮卡丘&quot;</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，我们给 div 标签添加了<code>ref = &quot;container&quot;</code>时，当该标签被挂载后，我们可以直接使用<code>this.$refs.container</code>获取相应的 DOM 节点（注意此处的写法，不要漏掉 $ 符号和 s），将该组件打印出来，并修改其文本内容。而此处的<code>innerHTML</code>就是原生 JS 里的属性，同样，通过这种方式我们可以实现以前我在原生 JS 中的所有操作。</p><p>需要注意的是，我们只有在组件挂载后才能访问模版引用，而如果我们在模版中的表达式上访问<code>this.$refs.container</code>，那么在初次渲染时会是<code>undefined</code>。这是因为在初次渲染前这个元素还不存在。</p>`,6);function v(m,g){return e(),l("div",null,[o,n("p",null,[s("侦听器的作用是侦听页面中响应式数据的变化，这些数据一旦发生变化，侦听器就会侦听到，从而进行一系列我们想要的逻辑操作。而所谓的响应式数据，我们可以简单理解为我们在"),i,s("中声明、被 "+p()+" 绑定的数据。",1)]),u,n("ul",null,[n("li",null,"改变内容：使用 "+p()+" 模版语法；",1),d,r]),k])}const h=t(c,[["render",v],["__file","Vuexuexibiji(san).html.vue"]]),y=JSON.parse('{"path":"/blogs/frontEnd/vue/Vuexuexibiji(san).html","title":"Vue笔记（三）：计算属性、类与样式绑定、表单输入绑定、侦听器、模版引用","lang":"zh-CN","frontmatter":{"title":"Vue笔记（三）：计算属性、类与样式绑定、表单输入绑定、侦听器、模版引用","date":"2024/9/16","categories":["frontEnd/vue"],"author":"aoxuexinghuo","tags":["Vue","手写","前端框架"]},"headers":[{"level":2,"title":"Vue学习笔记（三）：计算属性、类与样式绑定、表单输入绑定、侦听器、模版引用","slug":"vue学习笔记-三-计算属性、类与样式绑定、表单输入绑定、侦听器、模版引用","link":"#vue学习笔记-三-计算属性、类与样式绑定、表单输入绑定、侦听器、模版引用","children":[{"level":3,"title":"一、计算属性","slug":"一、计算属性","link":"#一、计算属性","children":[]},{"level":3,"title":"二、类与样式绑定","slug":"二、类与样式绑定","link":"#二、类与样式绑定","children":[]},{"level":3,"title":"三、表单输入绑定","slug":"三、表单输入绑定","link":"#三、表单输入绑定","children":[]},{"level":3,"title":"四、侦听器","slug":"四、侦听器","link":"#四、侦听器","children":[]},{"level":3,"title":"五、模版引用","slug":"五、模版引用","link":"#五、模版引用","children":[]}]}],"git":{"createdTime":1726474714000,"updatedTime":1726655097000,"contributors":[{"name":"lyydsheep","email":"2230561977@qq.com","commits":1}]},"filePathRelative":"blogs/frontEnd/vue/Vue学习笔记(三).md"}');export{h as comp,y as data};
