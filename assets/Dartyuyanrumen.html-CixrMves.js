import{_ as p,r as l,o as c,c as o,d as n,e as s,a as e,b as t}from"./app-CCasJ6XN.js";const i={},u=t(`<h3 id="dart简介" tabindex="-1"><a class="header-anchor" href="#dart简介"><span>Dart简介</span></a></h3><ul><li><p>Dart是谷歌开发的计算机语言，它是开源的，诞生于2011年10月10日。Dart是一款高效、简洁、已通过实战检验的语言，能够应对现代应用程序开发的挑战，并大大加强和精简了类型系统，清理了语法，并重建了大部分开发工具链，使得移动和Web开发更愉快高效。</p></li><li><p>Dart有着这样一些特性，被Flutter团队看重：</p><ul><li>AOT（Ahead Of Time）编译，编译成快速、可预测的本地代码，使得Flutter变得更快且几乎所有组件可定制</li><li>也可以JIT（Just In Time）编译，开发周期非常短，支持了Flutter流行的亚秒级有状态热重载</li><li>可以在没有锁的情况下进行对象分配与垃圾回收</li><li>不需要单独的声明式布局语言或单独的可视化界面构建器，因为其声明式编程易读且可视化，Flutter容易提供高级工具使布局更简单</li><li>易于学习，具有静态语言和动态语言用户都熟悉的特性</li></ul></li><li><p>这些特性并不是Dart所独有的，但Dart将它们组合的恰到好处</p></li><li><p>在Dart里，有这样一些<strong>重要特性</strong>：</p><ul><li>所有东西都是对象，包括变量、数字、函数等，所有的对象都是类的实例，且继承自内置的Object类</li><li>弱数据类型，支持动态类型dynamic var</li><li>Dart在运行前解析，指定数据类型和编译时常量能提高运行速度</li><li>统一的程序入main()</li><li>没有public、protected与private，私有特性通过在变量或函数加上下划线表示</li><li>支持anync/await异步处理</li></ul></li></ul><h3 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h3><ul><li>声明变量使用var关键字，<strong>变量保存的是对象的引用</strong>，也可以使用对象类型和动态类型（dynamic）来声明。未初始化的变量默认值是 null。即使变量是数字类型默认值也是 null，因为在 Dart 中一切都是对象。</li></ul><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="line">	<span class="token keyword">var</span> nameA <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;jmmmjA&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token class-name">String</span> nameB <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;jmmmjB&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">dynamic</span> nameC <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;jmmmjC&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	int a<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">assert</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>且在声明局部变量时，官方的代码风格建议使用var来声明。 <ul><li>声明常量使用final或const关键字，其区别是：const用于编译时常量，其实际上是隐式的final类型，还可以用来创建常量值；而final声明的常量可以且仅可以被赋值一次。</li><li>数字类型字面量是编译时常量。 在算术表达式中，只要参与计算的因子是编译时常量， 那么算术表达式的结果也是编译时常量。</li></ul></li></ul><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="line">	<span class="token keyword">final</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>	</span>
<span class="line">	<span class="token keyword">final</span> int b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token comment">//这两种都是可以的</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型"><span>基本数据类型</span></a></h3>`,8),r=n("li",null,[n("p",null,"Dart内建类型包括：Number、String、Boolean、List、Map")],-1),d={href:"https://stackoverflow.com/questions/2802957/number-of-bits-in-javascript-numbers/2803010#2803010",target:"_blank",rel:"noopener noreferrer"},k=t("<li><p>String：Dart 字符串是一组 UTF-16 单元序列。 字符串通过单引号或者双引号创建，可以通过 <code>${</code><em><code>expression</code></em><code>}</code> 的方式内嵌表达式。 如果表达式是一个标识符，则 {} 可以省略。 在 Dart 中通过调用就对象的 <code>toString()</code> 方法来得到对象相应的字符串。在字符串中，如果两个字符串包含了相同的编码序列，那么这两个字符串相等，即可以用 == 运算符比较两个字符串是否相等。字符串直接可以用+运算符。</p></li><li><p>Boolean：Dart 使用 <code>bool</code> 类型表示布尔值。 Dart 只有字面量 <code>true</code> and <code>false</code> 是布尔类型， 这两个对象都是编译时常量；Dart 支持类型安全，意味着不能使用 <code>if (nonbooleanValue)</code> 或者 <code>assert (nonbooleanValue)</code>。 而是应该像下面这样，明确的进行值检查：</p></li>",2),m=t(`<div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="line">	<span class="token comment">// 检查空字符串。</span></span>
<span class="line">	<span class="token keyword">var</span> fullName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">assert</span><span class="token punctuation">(</span>fullName<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	<span class="token comment">// 检查 0 值。</span></span>
<span class="line">	<span class="token keyword">var</span> hitPoints <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">assert</span><span class="token punctuation">(</span>hitPoints <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	<span class="token comment">// 检查 null 值。</span></span>
<span class="line">	<span class="token keyword">var</span> unicorn<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">assert</span><span class="token punctuation">(</span>unicorn <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	<span class="token comment">// 检查 NaN 。</span></span>
<span class="line">	<span class="token keyword">var</span> iMeantToDoThis <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">assert</span><span class="token punctuation">(</span>iMeantToDoThis<span class="token punctuation">.</span>isNaN<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>List：表示数组，在 Dart 中的 <em>Array</em> 就是 List对象， 通常称之为 <em>List</em> 。List 类型包含了很多 List 的操作函数。其字面量用<code>[]</code>表示。</p></li><li><p>Map：用于关联key/value，其字面量用<code>{key:value}</code>表示，且{}默认表示Map。</p></li><li><p>Set：表示集合，在Dart2.2中引入，其字面量用<code>{}</code>表示。</p></li><li><p>Rune：Rune 用来表示字符串中的 UTF-32 编码字符。由于 Dart 字符串是一系列 UTF-16 编码单元， 因此要在字符串中表示32位 Unicode 值需要特殊语法支持。</p></li><li><p>Symbol：一个 Symbol 对象表示 Dart 程序中声明的运算符或者标识符。 你也许永远都不需要使用 Symbol ，但要按名称引用标识符的 API 时， Symbol 就非常有用了。 因为代码压缩后会改变标识符的名称，但不会改变标识符的符号。 通过字面量 Symbol ，也就是标识符前面添加一个 <code>#</code> 号，来获取标识符的 Symbol 。Symbol 字面量是编译时常量。</p></li></ul><h3 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h3><ul><li><p>函数是对象，类型是_Function_，意味着函数也可以作为参数直接传入函数。</p></li><li><p>Dart里的函数具有这些特性：</p><ul><li><p>所有应用都需要有main()</p></li><li><p>支持箭头语法<code>=&gt;{ return expr; }</code>或<code>=&gt; expr;</code> 注意函数调用两种方法和各自区别： onPressed: () =&gt; _login(), onPressed: login(),</p></li><li><p>支持可选参数，包括命名可选参数与位置可选参数，命名可选参数是在调用函数时，可以使用指定命名参数 <code>paramName: value</code>，要求定义函数时，使用 <code>{param1, param2, …}</code> 来指定命名参数；位置可选参数则用<code>[]</code>括起来即可。</p><p>使用 @required注释表示参数是 <em>required</em> 性质的命名参数。</p><p>Flutter 创建实例的表达式可能很复杂， 因此窗口小部件构造函数仅使用命名参数。 这样创建实例的表达式更易于阅读。</p></li><li><p>支持参数默认值，使用方式如<code>[int a = 1]</code>,这样a是可选的，且未传入时默认值为1</p></li><li><p>支持匿名函数</p><p>([[<em>Type</em>] <em>param1</em>[, …]]) { <em>codeBlock</em>; };</p></li><li><p>所有函数都有返回值，若没有指定则默认返回null（系统会在最后添加隐式return）</p></li><li><p>支持词法闭包</p><p><em>闭包</em> 即一个函数对象，即使函数对象的调用在它原始作用域之外， 依然能够访问在它词法作用域内的变量。</p><p>函数可以封闭定义到它作用域内的变量。 接下来的示例中， <code>makeAdder()</code> 捕获了变量 <code>addBy</code>。 无论在什么时候执行返回函数，函数都会使用捕获的 <code>addBy</code> 变量。</p><p>用 == 比较闭包相等时，若是引用不同实例对象的同名方法会得到false</p></li></ul></li></ul><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="line">	<span class="token class-name">Function</span> <span class="token function">makeAdder</span><span class="token punctuation">(</span>num addBy<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	  <span class="token keyword">return</span> <span class="token punctuation">(</span>num i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> addBy <span class="token operator">+</span> i<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	</span>
<span class="line">	<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	  <span class="token comment">// 创建一个加 2 的函数。</span></span>
<span class="line">	  <span class="token keyword">var</span> add2 <span class="token operator">=</span> <span class="token function">makeAdder</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	  <span class="token comment">// 创建一个加 4 的函数。</span></span>
<span class="line">	  <span class="token keyword">var</span> add4 <span class="token operator">=</span> <span class="token function">makeAdder</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	  <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span></span>
<span class="line">	  <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">add4</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h3><ul><li><p>Dart定义了多种运算符，且大部分可重载，部分较为独特的运算符如下：</p><ul><li><p><code>~/</code> 返回一个整数值的除法</p></li><li><p><code>??</code> a??会在a不为null时返回true，否则为false</p></li><li><p><code>expr1??expr2</code> 如果 <em>expr1</em> 是 non-null， 返回 <em>expr1</em> 的值； 否则, 执行并返回 <em>expr2</em> 的值</p></li><li><p><code>as</code> 类型转换，且类型不符合或为null时会抛出异常</p></li><li><p><code>is</code> 对象是相应类型时返回true</p></li><li><p><code>is!</code> 对象不是相应类型时返回true</p></li><li><p><code>??=</code> 左为null时赋值</p></li></ul></li></ul><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="line">	<span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;#confirm&#39;</span></span><span class="token punctuation">)</span> <span class="token comment">// 获取对象。</span></span>
<span class="line">	<span class="token punctuation">.</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Confirm&#39;</span></span> <span class="token comment">// 调用成员变量。</span></span>
<span class="line">	<span class="token punctuation">.</span><span class="token punctuation">.</span>classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;important&#39;</span></span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">.</span><span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Confirmed!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	<span class="token comment">// 上面的写法和下面等价</span></span>
<span class="line">	</span>
<span class="line">	<span class="token keyword">var</span> button <span class="token operator">=</span> <span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;#confirm&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	button<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Confirm&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line">	button<span class="token punctuation">.</span>classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;important&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	button<span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Confirmed!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类与泛型" tabindex="-1"><a class="header-anchor" href="#类与泛型"><span>类与泛型</span></a></h3><h4 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数"><span>构造函数</span></a></h4><ul><li><p>构造函数构造函数的名字可以是 <code>ClassName</code> 或者 <code>ClassName.identifier</code>。**在没有声明构造函数的情况下， Dart 会提供一个默认的构造函数， 默认构造函数没有参数并会调用父类的无参构造函数。使用构造函数时的new关键字是可选的。</p></li><li><p>构造函数支持<strong>初始化列表</strong>，类似C++。</p></li><li><p>支持<strong>重定向构造函数</strong>。</p></li></ul><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="line">	<span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span></span>
<span class="line">	  num x<span class="token punctuation">,</span> y<span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	  <span class="token class-name">Point</span><span class="token punctuation">(</span>num x<span class="token punctuation">,</span> num y<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span></span>
<span class="line">	    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span></span>
<span class="line">	  <span class="token punctuation">}</span></span>
<span class="line">	  <span class="token comment">//根据dart语法糖可以这样写： Point(this.x, this.y);</span></span>
<span class="line">	</span>
<span class="line">	  <span class="token comment">// 命名构造函数</span></span>
<span class="line">	  <span class="token class-name">Point</span><span class="token punctuation">.</span><span class="token function">origin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	    x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">	    y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">	  <span class="token punctuation">}</span></span>
<span class="line">	</span>
<span class="line">	  <span class="token comment">// 指向主构造函数</span></span>
<span class="line">	  <span class="token class-name">Point</span><span class="token punctuation">.</span><span class="token function">alongXAxis</span><span class="token punctuation">(</span>num x<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),v={href:"https://www.dartcn.com/guides/language/language-tour#%e5%b8%b8%e9%87%8f%e6%9e%84%e9%80%a0%e5%87%bd%e6%95%b0",target:"_blank",rel:"noopener noreferrer"},b=n("strong",null,"常量构造函数",-1),g=n("code",null,"const",-1),h=n("code",null,"final",-1),y=n("code",null,"const",-1),f=n("em",null,"常量上下文",-1),w=n("code",null,"const",-1),_=n("code",null,"const",-1),x=n("code",null,"const",-1),D=n("code",null,"runtimeType",-1),S=n("code",null,"runtimeType",-1),j={href:"https://api.dartlang.org/stable/dart-core/Type-class.html",target:"_blank",rel:"noopener noreferrer"},P=t(`<div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="line">	<span class="token comment">// 这里有很多的 const 关键字。</span></span>
<span class="line">	<span class="token keyword">const</span> pointAndLine <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">	  <span class="token string-literal"><span class="token string">&#39;point&#39;</span></span><span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token keyword">const</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">	  <span class="token string-literal"><span class="token string">&#39;line&#39;</span></span><span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token keyword">const</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token comment">// 仅有一个 const ，由该 const 建立常量上下文。</span></span>
<span class="line">	<span class="token keyword">const</span> pointAndLine <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">	  <span class="token string-literal"><span class="token string">&#39;point&#39;</span></span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">	  <span class="token string-literal"><span class="token string">&#39;line&#39;</span></span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">;</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>支持<strong>工厂构造函数</strong>：当执行构造函数并不总是创建这个类的一个新实例时，则使用 <code>factory</code> 关键字。 例如，一个工厂构造函数可能会返回一个 cache 中的实例， 或者可能返回一个子类的实例。以下示例演示了从缓存中返回对象的工厂构造函数：</li></ul><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="line">	<span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span></span>
<span class="line">	  <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">	  bool mute <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	  <span class="token comment">// 从命名的 _ 可以知，</span></span>
<span class="line">	  <span class="token comment">// _cache 是私有属性。</span></span>
<span class="line">	  <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Logger</span><span class="token punctuation">&gt;</span></span> _cache <span class="token operator">=</span></span>
<span class="line">	      <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Logger</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	  <span class="token keyword">factory</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	    <span class="token keyword">if</span> <span class="token punctuation">(</span>_cache<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	      <span class="token keyword">return</span> _cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">	    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">	      <span class="token keyword">final</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	      _cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> logger<span class="token punctuation">;</span></span>
<span class="line">	      <span class="token keyword">return</span> logger<span class="token punctuation">;</span></span>
<span class="line">	    <span class="token punctuation">}</span></span>
<span class="line">	  <span class="token punctuation">}</span></span>
<span class="line">	</span>
<span class="line">	  <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	  <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mute<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	  <span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	</span>
<span class="line">	<span class="token comment">// 工厂构造函数无法访问 this。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),A=n("li",null,[n("p",null,[n("strong",null,"子类不会继承父类的构造函数"),s("。 子类不声明构造函数，那么它就只有默认构造函数 (匿名，没有参数) 。 这意味着父类的命名构造函数不会被子类继承。 如果希望使用父类中定义的命名构造函数创建子类， 就必须在子类中实现该构造函数。")])],-1),T=n("strong",null,"默认情况下，子类的构造函数会自动调用父类的默认构造函数（匿名，无参数）",-1),N={href:"https://www.dartcn.com/guides/language/language-tour#initializer-list",target:"_blank",rel:"noopener noreferrer"},C=n("ol",null,[n("li",null,"initializer list （初始化参数列表）"),n("li",null,"superclass’s no-arg constructor （父类的无名构造函数，不能访问this）"),n("li",null,"main class’s no-arg constructor （主类的无名构造函数）")],-1),I=n("li",null,[n("p",null,[s("如果父类中没有匿名无参的构造函数， 则需要手工调用父类的其他构造函数。 在当前构造函数冒号 ("),n("code",null,":"),s(") 之后，函数体之前，声明调用父类构造函数。")])],-1),L=t(`<h4 id="方法与变量" tabindex="-1"><a class="header-anchor" href="#方法与变量"><span>方法与变量</span></a></h4><ul><li><p>dart里定义非构造函数的方法默认是实例方法，定义类方法则在前加static关键字，但对于常见或广泛使用的工具和函数， 应该考虑使用顶级函数而不是静态方法。静态函数可以当做编译时常量使用。 例如，可以将静态方法作为参数传递给常量构造函数。</p></li><li><p>定义静态变量也是加static关键字</p></li><li><p>Getter 和 Setter 是用于对象属性读和写的特殊方法。 回想之前的例子，每个实例变量都有一个隐式 Getter ，通常情况下还会有一个 Setter 。 使用 <code>get</code> 和 <code>set</code> 关键字实现 Getter 和 Setter ，能够为实例创建额外的属性。</p></li></ul><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="line">	<span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span></span>
<span class="line">	  num left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	  <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	  <span class="token comment">// 定义两个计算属性： right 和 bottom。</span></span>
<span class="line">	  num <span class="token keyword">get</span> right <span class="token operator">=</span><span class="token operator">&gt;</span> left <span class="token operator">+</span> width<span class="token punctuation">;</span></span>
<span class="line">	  <span class="token keyword">set</span> <span class="token function">right</span><span class="token punctuation">(</span>num value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> left <span class="token operator">=</span> value <span class="token operator">-</span> width<span class="token punctuation">;</span></span>
<span class="line">	  num <span class="token keyword">get</span> bottom <span class="token operator">=</span><span class="token operator">&gt;</span> top <span class="token operator">+</span> height<span class="token punctuation">;</span></span>
<span class="line">	  <span class="token keyword">set</span> <span class="token function">bottom</span><span class="token punctuation">(</span>num value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> top <span class="token operator">=</span> value <span class="token operator">-</span> height<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	</span>
<span class="line">	<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	  <span class="token keyword">var</span> rect <span class="token operator">=</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	  <span class="token keyword">assert</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	  rect<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span></span>
<span class="line">	  <span class="token keyword">assert</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>最开始实现 Getter 和 Setter 也许是直接返回成员变量； 随着需求变化， Getter 和 Setter 可能需要进行计算处理而使用方法来实现； 但是，调用对象的代码不需要做任何的修改。</p></li><li><p>类似 (++) 之类操作符不管是否定义了 getter 方法，都能够正确的执行。 为了避免一些问题，操作符只调用一次 getter 方法， 然后把值保存到一个临时的变量中。</p></li></ul><h4 id="抽象类与抽象方法" tabindex="-1"><a class="header-anchor" href="#抽象类与抽象方法"><span>抽象类与抽象方法</span></a></h4><ul><li><p>抽象类：定义抽象类需要加abstract关键字，抽象类里可以定义工厂构造函数来实例化</p></li><li><p>抽象方法：抽象类里的方法默认是抽象方法。</p></li></ul><h4 id="隐式接口" tabindex="-1"><a class="header-anchor" href="#隐式接口"><span>隐式接口</span></a></h4><ul><li><p>每个类都隐式的定义了一个接口，接口包含了该类所有的实例成员及其实现的接口。 如果要创建一个 A 类，A 要支持 B 类的 API ，但是不需要继承 B 的实现， 那么可以通过 A 实现 B 的接口。</p></li><li><p>一个类可以通过 <code>implements</code> 关键字来实现一个或者多个接口， 并实现每个接口要求的 API。</p></li></ul><h4 id="类继承与重载" tabindex="-1"><a class="header-anchor" href="#类继承与重载"><span>类继承与重载</span></a></h4><ul><li><p>类的继承使用<code>extends</code>关键字，支持*@override*注解</p></li><li><p>子类可以重写实例方法，getter 和 setter。下面的运算符可以被重载。 例如，想要实现两个向量对象相加，可以重载<code>+</code> 方法。</p><p>| <code>&lt;</code> | <code>+</code> | <code>|</code> | <code>[]</code> | | —- | —- | —- | —– | | <code>&gt;</code> | <code>/</code> | <code>^</code> | <code>[]=</code> | | <code>&lt;=</code> | <code>~/</code> | <code>&amp;</code> | <code>~</code> | | <code>&gt;=</code> | <code>*</code> | <code>&lt;&lt;</code> | <code>==</code> | | <code>–</code> | <code>%</code> | <code>&gt;&gt;</code> | |</p><p>java不支持运算符重载 支持重写函数<br> java不允许多继承</p></li></ul><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="line">	<span class="token keyword">class</span> <span class="token class-name">Vector</span> <span class="token punctuation">{</span></span>
<span class="line">	  <span class="token keyword">final</span> int x<span class="token punctuation">,</span> y<span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	  <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	  <span class="token class-name">Vector</span> <span class="token keyword">operator</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">Vector</span> v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span>x <span class="token operator">+</span> v<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> v<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	  <span class="token class-name">Vector</span> <span class="token keyword">operator</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token class-name">Vector</span> v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span>x <span class="token operator">-</span> v<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> v<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	  <span class="token comment">// ···</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>!=</code> 运算符为非可重载运算符。 因为 <code>e1 != e2</code> 表达式仅仅是 <code>!(e1 == e2)</code> 的语法糖。</p></li><li><p>如果要重载 <code>==</code> 操作符，需要重写对象的 <code>hashCode</code> getter 方法。 重载 <code>==</code> 和 <code>hashCode</code> 的实例。</p></li></ul><h4 id="类混合-mixin-缓存" tabindex="-1"><a class="header-anchor" href="#类混合-mixin-缓存"><span>类混合（Mixin）！！缓存</span></a></h4><ul><li><p>Mixin 是复用类代码的一种途径， 复用的类可以在不同层级，之间可以不存在继承关系。</p></li><li><p>通过 <code>with</code> 后面跟一个或多个混入的名称，来 <em>使用</em> Mixin ， 下面的示例演示了两个使用 Mixin 的类：</p></li></ul><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="line">	<span class="token keyword">class</span> <span class="token class-name">Musician</span> <span class="token keyword">extends</span> <span class="token class-name">Performer</span> <span class="token keyword">with</span> <span class="token class-name">Musical</span> <span class="token punctuation">{</span></span>
<span class="line">	  <span class="token comment">// ···</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	</span>
<span class="line">	<span class="token keyword">class</span> <span class="token class-name">Maestro</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span></span>
<span class="line">	    <span class="token keyword">with</span> <span class="token class-name">Musical</span><span class="token punctuation">,</span> <span class="token class-name">Aggressive</span><span class="token punctuation">,</span> <span class="token class-name">Demented</span> <span class="token punctuation">{</span></span>
<span class="line">	  <span class="token class-name">Maestro</span><span class="token punctuation">(</span><span class="token class-name">String</span> maestroName<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	    name <span class="token operator">=</span> maestroName<span class="token punctuation">;</span></span>
<span class="line">	    canConduct <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">	  <span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="一些资源" tabindex="-1"><a class="header-anchor" href="#一些资源"><span>一些资源</span></a></h3>`,16),M={href:"https://dart.dev/language",target:"_blank",rel:"noopener noreferrer"},B={href:"https://dart.dev/effective-dart/usage",target:"_blank",rel:"noopener noreferrer"},V={href:"https://www.youtube.com/watch?v=MqjCIITfCIA&list=PLjxrf2q8roU23XGwz3Km7sQZFTdB996iG&index=8",target:"_blank",rel:"noopener noreferrer"},F={href:"https://github.com/toly1994328/FlutterUnit",target:"_blank",rel:"noopener noreferrer"};function q(E,z){const a=l("ExternalLinkIcon");return c(),o("div",null,[u,n("ul",null,[r,n("li",null,[n("p",null,[s("Number：包括int与double，整数值不大于64位， 具体取决于平台。 在 Dart VM 上， 值的范围从 -263 到 263 - 1。Dart 被编译为 JavaScript 时，使用 "),n("a",d,[s("JavaScript numbers,"),e(a)]),s(" 值的范围从 -253 到 253 - 1；double是64位（双精度）浮点数，依据 IEEE 754 标准。")])]),k]),m,n("ul",null,[n("li",null,[s("支持"),n("a",v,[b,e(a)]),s("，如果该类生成的对象是固定不变的， 那么就可以把这些对象定义为编译时常量。 为此，需要定义一个 "),g,s(" 构造函数， 并且声明所有实例变量为 "),h,s("。 使用常量构造函数构造常量时，需要在构造函数名之前加 "),y,s(" 关键字；构造两个相同的编译时常量会产生一个唯一的， 标准的实例。在 "),f,s(" 中， 构造函数或者字面量前的 "),w,s(" 可以省略。 例如，下面代码创建了一个 const 类型的 map 对象，可以保留第一个 "),_,s(" 关键字，其余的全部省略。如果常量构造函数在常量上下文之外， 且省略了 "),x,s(" 关键字， 此时创建的对象是非常量对象。使用对象的 "),D,s(" 属性， 可以在运行时获取对象的类型， "),S,s(" 属性回返回一个 "),n("a",j,[s("Type"),e(a)]),s(" 对象。")])]),P,n("ul",null,[A,n("li",null,[n("p",null,[T,s("。 父类的构造函数在子类构造函数体开始执行的位置被调用。 如果提供了一个 "),n("a",N,[s("initializer list"),e(a)]),s(" （初始化参数列表）， 则初始化参数列表在父类构造函数执行之前执行。 执行顺序如下：")]),C]),I]),L,n("p",null,[n("a",M,[s("Dart官方文档"),e(a)]),n("a",B,[s("Dart官方API库"),e(a)]),n("a",V,[s("Flutter组件速学"),e(a)]),n("a",F,[s("Flutter组件速查"),e(a)])])])}const R=p(i,[["render",q],["__file","Dartyuyanrumen.html.vue"]]),U=JSON.parse('{"path":"/docs/frontEnd/Dartyuyanrumen.html","title":"Dart语言入门","lang":"zh-CN","frontmatter":{"title":"Dart语言入门","date":"2024/9/16","author":"SimonWuzy"},"headers":[{"level":3,"title":"Dart简介","slug":"dart简介","link":"#dart简介","children":[]},{"level":3,"title":"变量","slug":"变量","link":"#变量","children":[]},{"level":3,"title":"基本数据类型","slug":"基本数据类型","link":"#基本数据类型","children":[]},{"level":3,"title":"函数","slug":"函数","link":"#函数","children":[]},{"level":3,"title":"运算符","slug":"运算符","link":"#运算符","children":[]},{"level":3,"title":"类与泛型","slug":"类与泛型","link":"#类与泛型","children":[]},{"level":3,"title":"一些资源","slug":"一些资源","link":"#一些资源","children":[]}],"git":{"createdTime":1726454741000,"updatedTime":1726454741000,"contributors":[{"name":"Simon_Wzy","email":"1691663479@qq.com","commits":1}]},"filePathRelative":"docs/frontEnd/Dart语言入门.md"}');export{R as comp,U as data};
